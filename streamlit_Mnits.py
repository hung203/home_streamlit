import streamlit as st
import mlflow
import mlflow.sklearn
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
import numpy as np
import matplotlib.pyplot as plt
import random
import pandas as pd
from streamlit_drawable_canvas import st_canvas
from PIL import Image
import cv2
# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("Ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay MNIST v·ªõi Streamlit v√† MLflow")

tab1, tab2, tab3, tab4 = st.tabs([
    "X·ª≠ l√Ω d·ªØ li·ªáu",
    "Hu·∫•n luy·ªán",
    "D·ª± ƒëo√°n",
    'Mlflow'
])

# ------------------------
# B∆∞·ªõc 1: X·ª≠ l√Ω d·ªØ li·ªáu
# ------------------------
with tab1:
    st.header("1. X·ª≠ l√Ω d·ªØ li·ªáu")

    # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i ch∆∞a
    if "mnist_loaded" not in st.session_state:
        mnist = fetch_openml('mnist_784', version=1, as_frame=False)
        st.session_state.total_samples = mnist.data.shape[0]  # T·ªïng s·ªë m·∫´u
        st.session_state.mnist_data = mnist  # L∆∞u d·ªØ li·ªáu g·ªëc
        st.session_state.mnist_loaded = False  # Ch∆∞a t·∫£i m·∫´u c·ª• th·ªÉ

    # Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u s·ª≠ d·ª•ng
    sample_size = st.number_input(
        "Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u d·ªØ li·ªáu s·ª≠ d·ª•ng", 
        min_value=1000, 
        max_value=st.session_state.total_samples, 
        value=st.session_state.total_samples, 
        step=1000
    )

    if st.button("T·∫£i d·ªØ li·ªáu MNIST"):
        mnist = st.session_state.mnist_data
        X, y = mnist.data / 255.0, mnist.target.astype(int)
        
        # Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u d·ªØ li·ªáu theo y√™u c·∫ßu
        if sample_size < st.session_state.total_samples:
            X, _, y, _ = train_test_split(X, y, train_size=sample_size, random_state=42, stratify=y)
        
        # L∆∞u d·ªØ li·ªáu v√†o session_state
        st.session_state.X = X
        st.session_state.y = y
        st.session_state.mnist_loaded = True
        st.session_state.selected_sample_size = sample_size
        st.write(f"D·ªØ li·ªáu MNIST ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªõi {sample_size} m·∫´u!")

    # Ch·ªâ hi·ªÉn th·ªã b∆∞·ªõc chia t√°ch khi d·ªØ li·ªáu ƒë√£ t·∫£i
    if st.session_state.mnist_loaded:
        st.header("2. Chia t√°ch d·ªØ li·ªáu")

        test_size = st.slider("Ch·ªçn t·ª∑ l·ªá d·ªØ li·ªáu Test", 0.1, 0.5, 0.2, 0.05)
        valid_size = st.slider("Ch·ªçn t·ª∑ l·ªá d·ªØ li·ªáu Validation t·ª´ Train", 0.1, 0.3, 0.2, 0.05)

        if st.button("Chia t√°ch d·ªØ li·ªáu"):
            X_train_full, X_test, y_train_full, y_test = train_test_split(
                st.session_state.X, st.session_state.y, test_size=test_size, random_state=42, stratify=st.session_state.y
            )
            X_train, X_valid, y_train, y_valid = train_test_split(
                X_train_full, y_train_full, test_size=valid_size, random_state=42, stratify=y_train_full
            )

            # L∆∞u v√†o session_state
            st.session_state.X_train = X_train
            st.session_state.X_valid = X_valid
            st.session_state.X_test = X_test
            st.session_state.y_train = y_train
            st.session_state.y_valid = y_valid
            st.session_state.y_test = y_test
            st.session_state.data_split_done = True

        # Hi·ªÉn th·ªã th√¥ng tin sau khi chia t√°ch
        if st.session_state.get("data_split_done", False):
            st.write(f"D·ªØ li·ªáu Train: {st.session_state.X_train.shape}")
            st.write(f"D·ªØ li·ªáu Validation: {st.session_state.X_valid.shape}")
            st.write(f"D·ªØ li·ªáu Test: {st.session_state.X_test.shape}")
    
    # Hi·ªÉn th·ªã h√¨nh ·∫£nh minh h·ªça
    st.subheader("V√≠ d·ª• m·ªôt v√†i h√¨nh ·∫£nh minh h·ªça")
    
    if st.session_state.mnist_loaded:
        X = st.session_state.X
        y = st.session_state.y

        # N√∫t l√†m m·ªõi h√¨nh ·∫£nh
        if st.button("üîÑ Hi·ªÉn th·ªã ·∫£nh m·ªõi"):
            st.session_state.example_images = random.sample(range(len(X)), 5)

        indices = st.session_state.get("example_images", random.sample(range(len(X)), 5))

        fig, axs = plt.subplots(1, 5, figsize=(12, 3))
        for i, idx in enumerate(indices):
            img = X[idx].reshape(28, 28)
            axs[i].imshow(img, cmap='gray')
            axs[i].axis('off')
            axs[i].set_title(f"Label: {y[idx]}")
        
        st.pyplot(fig)
    else:
        st.warning("Vui l√≤ng t·∫£i d·ªØ li·ªáu tr∆∞·ªõc khi hi·ªÉn th·ªã h√¨nh ·∫£nh!")
# ------------------------
# B∆∞·ªõc 3: Hu·∫•n luy·ªán v√† ƒë√°nh gi√° m√¥ h√¨nh
# ------------------------
with tab2:
    st.header("3. Hu·∫•n luy·ªán v√† ƒë√°nh gi√° m√¥ h√¨nh")

    # Ch·ªçn m√¥ h√¨nh
    model_choice = st.selectbox("Ch·ªçn m√¥ h√¨nh", ["Decision Tree", "SVM"], key="model_choice")
    
    if model_choice == "Decision Tree":
        max_depth = st.slider("Ch·ªçn ƒë·ªô s√¢u t·ªëi ƒëa c·ªßa c√¢y quy·∫øt ƒë·ªãnh", 1, 50, 20)
        min_samples_split = st.slider("S·ªë m·∫´u t·ªëi thi·ªÉu ƒë·ªÉ chia m·ªôt node", 2, 20, 2)
        min_samples_leaf = st.slider("S·ªë m·∫´u t·ªëi thi·ªÉu trong m·ªôt l√°", 1, 10, 1)
    
    elif model_choice == "SVM":
        kernel = st.selectbox("Ch·ªçn kernel", ["linear", "poly", "rbf", "sigmoid"], index=2)
        
        if kernel == "linear":
            C = st.number_input("Ch·ªçn gi√° tr·ªã C", min_value=0.01, max_value=100.0, value=10.0, step=0.1)
            gamma = None  # Kh√¥ng s·ª≠ d·ª•ng gamma v·ªõi kernel linear
        else:
            gamma = st.number_input("Ch·ªçn gi√° tr·ªã gamma", min_value=0.0001, max_value=1.0, value=0.01, step=0.0001)
            C = None  # Kh√¥ng s·ª≠ d·ª•ng C v·ªõi kernel rbf, poly, sigmoid
        
        degree = st.slider("B·∫≠c c·ªßa kernel (ch·ªâ d√πng cho poly)", 2, 5, 3) if kernel == "poly" else None
    
    # N√∫t hu·∫•n luy·ªán
    if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh"):
        if "X_train" not in st.session_state or "X_valid" not in st.session_state:
            st.error("B·∫°n c·∫ßn chia t√°ch d·ªØ li·ªáu tr∆∞·ªõc!")
            st.stop()
        
        X_train_used = st.session_state.X_train
        y_train_used = st.session_state.y_train
        X_valid = st.session_state.X_valid
        y_valid = st.session_state.y_valid

        # T·∫°o t√™n th√≠ nghi·ªám t·ª± ƒë·ªông d·ª±a tr√™n t√™n m√¥ h√¨nh v√† th·ªùi gian hi·ªán t·∫°i
        import datetime
        timestamp = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
        experiment_name = f"Experiment_{model_choice}_{timestamp}"
        # Thi·∫øt l·∫≠p t√™n th√≠ nghi·ªám cho mlflow (n·∫øu th√≠ nghi·ªám ch∆∞a t·ªìn t·∫°i, mlflow s·∫Ω t·∫°o m·ªõi)
        mlflow.set_experiment(experiment_name)
        
        with mlflow.start_run():
            # Log t√™n th√≠ nghi·ªám d∆∞·ªõi d·∫°ng tham s·ªë
            mlflow.log_param("experiment_name", experiment_name)
            
            if model_choice == "Decision Tree":
                model = DecisionTreeClassifier(
                    max_depth=max_depth, 
                    min_samples_split=min_samples_split, 
                    min_samples_leaf=min_samples_leaf, 
                    random_state=42
                )
                mlflow.log_param("max_depth", max_depth)
                mlflow.log_param("min_samples_split", min_samples_split)
                mlflow.log_param("min_samples_leaf", min_samples_leaf)
    
            else:  # SVM
                scaler = StandardScaler()
                X_train_used_scaled = scaler.fit_transform(X_train_used)
                X_valid_scaled = scaler.transform(X_valid)
                st.session_state.scaler = scaler
                
                model_params = {"kernel": kernel, "random_state": 42}
                
                if kernel == "linear":
                    model_params["C"] = C
                    mlflow.log_param("C", C)
                else:
                    model_params["gamma"] = gamma
                    mlflow.log_param("gamma", gamma)
    
                if kernel == "poly":
                    model_params["degree"] = degree
                    mlflow.log_param("degree", degree)
                
                model = SVC(**model_params)
                
                X_train_used, X_valid = X_train_used_scaled, X_valid_scaled
    
            # Hu·∫•n luy·ªán m√¥ h√¨nh
            model.fit(X_train_used, y_train_used)
            y_pred = model.predict(X_valid)
    
            # L∆∞u c√°c k·∫øt qu·∫£ v√† m√¥ h√¨nh v√†o session_state
            st.session_state.model = model
            st.session_state.trained_model_name = model_choice
            st.session_state.train_accuracy = accuracy_score(y_valid, y_pred)
            st.session_state.train_report = classification_report(y_valid, y_pred)
            
            mlflow.log_param("model", model_choice)
            mlflow.log_metric("accuracy", st.session_state.train_accuracy)
            mlflow.sklearn.log_model(model, "model")
    
        # L∆∞u t√™n th√≠ nghi·ªám v√†o session_state v√† hi·ªÉn th·ªã ra giao di·ªán
        st.session_state.experiment_name = experiment_name
        st.write("T√™n th√≠ nghi·ªám:", experiment_name)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ sau khi hu·∫•n luy·ªán
    if "train_accuracy" in st.session_state:
        st.write(f"üîπ **ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p validation:** {st.session_state.train_accuracy:.4f}")
    if "train_report" in st.session_state:
        st.text("B√°o c√°o ph√¢n lo·∫°i:")
        st.text(st.session_state.train_report)


# ------------------------
# B∆∞·ªõc 4: Demo d·ª± ƒëo√°n
# ------------------------

with tab3:
    # H√†m ti·ªÅn x·ª≠ l√Ω ·∫£nh t·∫£i l√™n
    def preprocess_uploaded_image(image):
        image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  # Chuy·ªÉn th√†nh ·∫£nh x√°m
        image = cv2.resize(image, (28, 28))  # Resize v·ªÅ 28x28
        image = image.reshape(1, -1) / 255.0  # Chu·∫©n h√≥a v·ªÅ [0,1]
        return image

    # H√†m ti·ªÅn x·ª≠ l√Ω ·∫£nh t·ª´ canvas
    def preprocess_canvas_image(image_data):
        image = np.array(image_data)[:, :, 0]  # L·∫•y k√™nh grayscale
        image = cv2.resize(image, (28, 28))  # Resize v·ªÅ 28x28
        image = image.reshape(1, -1) / 255.0  # Chu·∫©n h√≥a
        return image

    # Ki·ªÉm tra m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán ch∆∞a
    if "model" not in st.session_state:
        st.error("‚ö†Ô∏è M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán! H√£y quay l·∫°i tab tr∆∞·ªõc ƒë·ªÉ hu·∫•n luy·ªán tr∆∞·ªõc khi d·ª± ƒëo√°n.")
        st.stop()

    # Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p ·∫£nh
    st.header("üñçÔ∏è D·ª± ƒëo√°n ch·ªØ s·ªë vi·∫øt tay")
    option = st.radio("üñºÔ∏è Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p:", ["üìÇ T·∫£i ·∫£nh l√™n", "‚úèÔ∏è V·∫Ω s·ªë"])

    # üìÇ X·ª≠ l√Ω ·∫£nh t·∫£i l√™n
    if option == "üìÇ T·∫£i ·∫£nh l√™n":
        uploaded_file = st.file_uploader("üì§ T·∫£i ·∫£nh s·ªë vi·∫øt tay (PNG, JPG)", type=["png", "jpg", "jpeg"])

        if uploaded_file is not None:
            image = cv2.imdecode(np.frombuffer(uploaded_file.read(), np.uint8), cv2.IMREAD_COLOR)
            processed_image = preprocess_uploaded_image(image)

            # Hi·ªÉn th·ªã ·∫£nh
            st.image(image, caption="üì∑ ·∫¢nh t·∫£i l√™n", use_column_width=True)

            # D·ª± ƒëo√°n s·ªë
            if st.button("üîÆ D·ª± ƒëo√°n"):
                model = st.session_state.model

                if st.session_state.trained_model_name == "SVM" and "scaler" in st.session_state:
                    processed_image = st.session_state.scaler.transform(processed_image)

                prediction = model.predict(processed_image)[0]
                probabilities = model.predict_proba(processed_image)[0]

                st.write(f"üéØ **D·ª± ƒëo√°n: {prediction}**")
                st.write(f"üî¢ **ƒê·ªô tin c·∫≠y: {probabilities[prediction] * 100:.2f}%**")

    # ‚úèÔ∏è V·∫Ω s·ªë tr√™n canvas
    elif option == "‚úèÔ∏è V·∫Ω s·ªë":
        canvas_result = st_canvas(
            fill_color="white",
            stroke_width=15,
            stroke_color="black",
            background_color="white",
            width=280,
            height=280,
            drawing_mode="freedraw",
            key="canvas"
        )

        if st.button("üîÆ D·ª± ƒëo√°n"):
            if canvas_result.image_data is not None:
                processed_canvas = preprocess_canvas_image(canvas_result.image_data)

                model = st.session_state.model

                if st.session_state.trained_model_name == "SVM" and "scaler" in st.session_state:
                    processed_canvas = st.session_state.scaler.transform(processed_canvas)

                prediction = model.predict(processed_canvas)[0]
                probabilities = model.predict_proba(processed_canvas)[0]

                st.write(f"üéØ **D·ª± ƒëo√°n: {prediction}**")
                st.write(f"üî¢ **ƒê·ªô tin c·∫≠y: {probabilities[prediction] * 100:.2f}%**")

with tab4:
    st.header("5. Tracking MLflow")
    try:
        from mlflow.tracking import MlflowClient
        client = MlflowClient()

        # L·∫•y danh s√°ch th√≠ nghi·ªám t·ª´ MLflow
        experiments = mlflow.search_experiments()

        if experiments:
            st.write("#### Danh s√°ch th√≠ nghi·ªám")
            experiment_data = [
                {
                    "Experiment ID": exp.experiment_id,
                    "Experiment Name": exp.name,
                    "Artifact Location": exp.artifact_location
                }
                for exp in experiments
            ]
            df_experiments = pd.DataFrame(experiment_data)
            st.dataframe(df_experiments)

            # Ch·ªçn th√≠ nghi·ªám d·ª±a tr√™n T√äN thay v√¨ ID
            selected_exp_name = st.selectbox(
                "üîç Ch·ªçn th√≠ nghi·ªám ƒë·ªÉ xem chi ti·∫øt",
                options=[exp.name for exp in experiments]
            )

            # L·∫•y ID t∆∞∆°ng ·ª©ng v·ªõi t√™n ƒë∆∞·ª£c ch·ªçn
            selected_exp_id = next(exp.experiment_id for exp in experiments if exp.name == selected_exp_name)

            # L·∫•y danh s√°ch runs trong th√≠ nghi·ªám ƒë√£ ch·ªçn
            runs = mlflow.search_runs(selected_exp_id)
            if not runs.empty:
                st.write("#### Danh s√°ch runs")
                st.dataframe(runs)

                # Ch·ªçn run ƒë·ªÉ xem chi ti·∫øt
                selected_run_id = st.selectbox(
                    "üîç Ch·ªçn run ƒë·ªÉ xem chi ti·∫øt",
                    options=runs["run_id"]
                )

                # Hi·ªÉn th·ªã chi ti·∫øt run
                run = mlflow.get_run(selected_run_id)
                st.write("##### Th√¥ng tin run")
                st.write(f"*Run ID:* {run.info.run_id}")
                st.write(f"*Experiment ID:* {run.info.experiment_id}")
                st.write(f"*Start Time:* {run.info.start_time}")

                # Hi·ªÉn th·ªã metrics
                st.write("##### Metrics")
                st.json(run.data.metrics)

                # Hi·ªÉn th·ªã params
                st.write("##### Params")
                st.json(run.data.params)

                # Hi·ªÉn th·ªã artifacts s·ª≠ d·ª•ng client.list_artifacts
                artifacts = client.list_artifacts(selected_run_id)
                if artifacts:
                    st.write("##### Artifacts")
                    for artifact in artifacts:
                        st.write(f"- {artifact.path}")
            else:
                st.warning("Kh√¥ng c√≥ runs n√†o trong th√≠ nghi·ªám n√†y.")
        else:
            st.warning("Kh√¥ng c√≥ th√≠ nghi·ªám n√†o ƒë∆∞·ª£c t√¨m th·∫•y.")
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch th√≠ nghi·ªám: {e}")
