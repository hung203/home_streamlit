import numpy as np
import pandas as pd
import streamlit as st
import mlflow
import mlflow.sklearn
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.datasets import fetch_openml
import datetime
import plotly.express as px

mlflow.set_tracking_uri("file:./mlruns")

# ------------------ KHAI B√ÅO BI·∫æN TR·∫†NG TH√ÅI ------------------
if "mnist_loaded" not in st.session_state:
    st.session_state.mnist_loaded = False
if "X_pca" not in st.session_state:
    st.session_state.X_pca = None
if "X_tsne" not in st.session_state:
    st.session_state.X_tsne = None

# ------------------ H√ÄM T·∫¢I D·ªÆ LI·ªÜU MNIST (CACHE) ------------------
@st.cache_data
def tai_du_lieu_MNIST(sample_size):
    mnist = fetch_openml('mnist_784', version=1, as_frame=False)
    X, y = mnist.data / 255.0, mnist.target.astype(int)
    total_samples = mnist.data.shape[0]
    if sample_size < total_samples:
        X, _, y, _ = train_test_split(
            X, y, train_size=sample_size / total_samples, random_state=42, stratify=y
        )
    return X, y, total_samples

# ------------------ H√ÄM V·∫º BI·ªÇU ƒê·ªí TR·ª∞C QUAN H√ìA ------------------
def ve_bieu_do(X, y, title):
    df = pd.DataFrame({
        'X': X[:, 0],
        'Y': X[:, 1],
        'Label': y.astype(str)
    })
    fig = px.scatter(
        df, x='X', y='Y', color='Label', title=title,
        labels={'X': 'Th√†nh ph·∫ßn 1', 'Y': 'Th√†nh ph·∫ßn 2'},
        color_discrete_sequence=px.colors.qualitative.T10 if len(set(y)) <= 10 else px.colors.qualitative.Dark24,
        opacity=0.7, height=600
    )
    fig.update_layout(
        legend_title_text='Ch·ªØ s·ªë', title_font_size=14,
        xaxis_title_font_size=12, yaxis_title_font_size=12,
        legend=dict(x=1.05, y=1)
    )
    return fig

def ve_bieu_do_3d(X, y, title):
    df = pd.DataFrame({
        'X': X[:, 0], 'Y': X[:, 1], 'Z': X[:, 2],
        'Label': y.astype(str)
    })
    fig = px.scatter_3d(
        df, x='X', y='Y', z='Z', color='Label', title=title,
        labels={'X': 'Th√†nh ph·∫ßn 1', 'Y': 'Th√†nh ph·∫ßn 2', 'Z': 'Th√†nh ph·∫ßn 3'},
        color_discrete_sequence=px.colors.qualitative.T10 if len(set(y)) <= 10 else px.colors.qualitative.Dark24,
        opacity=0.7, height=600
    )
    fig.update_layout(
        legend_title_text='Ch·ªØ s·ªë', title_font_size=14,
        scene=dict(
            xaxis_title='Th√†nh ph·∫ßn 1', yaxis_title='Th√†nh ph·∫ßn 2', zaxis_title='Th√†nh ph·∫ßn 3',
            xaxis_title_font_size=12, yaxis_title_font_size=12, zaxis_title_font_size=12
        ),
        legend=dict(x=1.05, y=1)
    )
    return fig

# ------------------ T·∫†O 3 TAB ------------------
tab1, tab2, tab3 = st.tabs(["L√Ω thuy·∫øt v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu", "Th·ª±c hi·ªán gi·∫£m chi·ªÅu", "MLflow"])

# ----------- Tab 1: L√Ω thuy·∫øt v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu -----------
with tab1:
    st.header("L√Ω thuy·∫øt v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu")
    st.markdown(r"""
    ### Gi·ªõi thi·ªáu v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu üöÄ
    **Gi·∫£m chi·ªÅu d·ªØ li·ªáu** l√† qu√° tr√¨nh chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ kh√¥ng gian c√≥ s·ªë chi·ªÅu cao (v·ªõi nhi·ªÅu ƒë·∫∑c tr∆∞ng) sang kh√¥ng gian c√≥ s·ªë chi·ªÅu th·∫•p h∆°n m√† v·∫´n gi·ªØ l·∫°i ƒë∆∞·ª£c nh·ªØng ƒë·∫∑c tr∆∞ng quan tr·ªçng nh·∫•t. Qu√° tr√¨nh n√†y gi√∫p:
    - **Tr·ª±c quan h√≥a d·ªØ li·ªáu üìä:** Hi·ªÉn th·ªã d·ªØ li·ªáu trong kh√¥ng gian 2D ho·∫∑c 3D, t·ª´ ƒë√≥ d·ªÖ d√†ng nh·∫≠n bi·∫øt c·∫•u tr√∫c, nh√≥m (clusters) hay c√°c m·ªëi li√™n h·ªá gi·ªØa c√°c m·∫´u.
    - **Gi·∫£m nhi·ªÖu v√† tƒÉng t·ªëc ƒë·ªô t√≠nh to√°n ‚ö°:** Lo·∫°i b·ªè nh·ªØng ƒë·∫∑c tr∆∞ng d∆∞ th·ª´a, kh√¥ng c·∫ßn thi·∫øt gi√∫p m√¥ h√¨nh h·ªçc m√°y ch·∫°y nhanh h∆°n v√† tr√°nh t√¨nh tr·∫°ng qu√° kh·ªõp (overfitting).
    """)

    st.header("üìå L√Ω thuy·∫øt v·ªÅ PCA (Ph√¢n t√≠ch th√†nh ph·∫ßn ch√≠nh)", divider="blue")
    st.subheader("üîπ PCA l√† g√¨?")
    st.write(r"""
    PCA (Principal Component Analysis) l√† m·ªôt k·ªπ thu·∫≠t gi·∫£m chi·ªÅu d·ªØ li·ªáu, chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ban ƒë·∫ßu th√†nh c√°c **th√†nh ph·∫ßn ch√≠nh** gi·ªØ ph·∫ßn l·ªõn ph∆∞∆°ng sai. H√¨nh ·∫£nh d∆∞·ªõi ƒë√¢y minh h·ªça c√°c b∆∞·ªõc th·ª±c hi·ªán PCA.
    """)

    st.subheader("2Ô∏è‚É£ C√°c b∆∞·ªõc th·ª±c hi·ªán PCA", divider="blue")
    st.markdown("#### **B∆∞·ªõc 1: T√¨m vector trung b√¨nh (Find mean vector)**")
    st.write(r" - T√≠nh vector trung b√¨nh c·ªßa d·ªØ li·ªáu ban ƒë·∫ßu (k√Ω hi·ªáu l√† $\mathbf{X}$).")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("image/Screenshot 2025-03-12 203225.png")

    st.markdown("#### **B∆∞·ªõc 2: Tr·ª´ vector trung b√¨nh (Subtract mean)**")
    st.write(r" - Tr·ª´ vector trung b√¨nh kh·ªèi t·ª´ng ƒëi·ªÉm d·ªØ li·ªáu ƒë·ªÉ ƒë∆∞a d·ªØ li·ªáu v·ªÅ t√¢m t·∫°i g·ªëc t·ªça ƒë·ªô (k√Ω hi·ªáu l√† $\hat{\mathbf{X}}$).")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("image/Screenshot 2025-03-12 203258.png")

    st.markdown("#### **B∆∞·ªõc 3: T√≠nh ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai (Compute covariance matrix)**")
    st.write(r" - T√≠nh ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai $\mathbf{S}$: $\mathbf{S} = \frac{1}{N} \mathbf{X} \mathbf{X}^T$.")

    st.markdown("#### **B∆∞·ªõc 4: T√≠nh gi√° tr·ªã ri√™ng (eigenvalues) v√† vector ri√™ng (eigenvectors) c·ªßa $\mathbf{S}$**")
    st.write(r" - T√¨m c√°c gi√° tr·ªã ri√™ng ($\lambda_1, \lambda_2, \ldots$) v√† vector ri√™ng ($\mathbf{u}_1, \mathbf{u}_2, \ldots$).")

    st.markdown(r"#### **B∆∞·ªõc 5: Ch·ªçn $K$ vector ri√™ng c√≥ gi√° tr·ªã ri√™ng l·ªõn nh·∫•t**")
    st.write(r" - Ch·ªçn $K$ vector ri√™ng v·ªõi $K$ gi√° tr·ªã ri√™ng l·ªõn nh·∫•t.")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("image/Screenshot 2025-03-12 203337.png")

    st.markdown("#### **B∆∞·ªõc 6: Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang vector ri√™ng ƒë√£ ch·ªçn**")
    st.write(r" - Nh√¢n $\hat{\mathbf{X}}$ v·ªõi ma tr·∫≠n $K$ vector ri√™ng.")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("image/Screenshot 2025-03-12 203327.png")

    st.markdown("#### **B∆∞·ªõc 7: L·∫•y c√°c ƒëi·ªÉm chi·∫øu trong kh√¥ng gian chi·ªÅu th·∫•p**")
    st.write(r" - Thu d·ªØ li·ªáu m·ªõi $\mathbf{Z}$ trong kh√¥ng gian $K$ chi·ªÅu.")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("image/Screenshot 2025-03-12 203306.png")

    st.markdown("### üé® L∆∞u √Ω quan tr·ªçng v·ªÅ PCA")
    st.write(r" - PCA gi·ªØ c√°c th√†nh ph·∫ßn ch√≠nh c√≥ ph∆∞∆°ng sai l·ªõn nh·∫•t, d·ªØ li·ªáu c·∫ßn ƒë∆∞·ª£c chu·∫©n h√≥a tr∆∞·ªõc.")

    st.header("üìå L√Ω thuy·∫øt v·ªÅ t-SNE (t-Distributed Stochastic Neighbor Embedding)", divider="blue")
    st.markdown("#### B∆∞·ªõc 1: T√≠nh \( p_{j|i} \) trong kh√¥ng gian chi·ªÅu cao b·∫±ng Gaussian v√† chu·∫©n h√≥a")
    st.write(" - ƒêo ƒë·ªô t∆∞∆°ng t·ª± b·∫±ng ph√¢n ph·ªëi Gaussian, chu·∫©n h√≥a t·ªïng x√°c su·∫•t = 1.")
    st.image('https://miro.medium.com/v2/resize:fit:4800/format:webp/0*pTTqRArwYV_tGnF0.png')

    st.markdown("#### B∆∞·ªõc 2: Kh·ªüi t·∫°o ng·∫´u nhi√™n c√°c ƒëi·ªÉm trong kh√¥ng gian chi·ªÅu th·∫•p")
    st.write(" - T·∫°o c√°c ƒëi·ªÉm ng·∫´u nhi√™n trong kh√¥ng gian 2D/3D.")
    st.image('https://miro.medium.com/v2/resize:fit:1100/format:webp/0*sNHrck20Xt7uS7X9.png')

    st.markdown("#### B∆∞·ªõc 3: T√≠nh \( q_{ij} \) trong kh√¥ng gian chi·ªÅu th·∫•p b·∫±ng ph√¢n ph·ªëi Student-t")
    st.write(" - ƒêo ƒë·ªô t∆∞∆°ng t·ª± b·∫±ng ph√¢n ph·ªëi Student-t.")

    st.markdown("#### B∆∞·ªõc 4: T·ªëi ∆∞u h√≥a v·ªã tr√≠ c√°c ƒëi·ªÉm b·∫±ng gradient descent ƒë·ªÉ gi·∫£m KL divergence")
    st.write(" - ƒêi·ªÅu ch·ªânh ƒë·ªÉ \( q_{ij} \) gi·ªëng \( p_{j|i} \) nh·∫•t.")
    st.image('https://miro.medium.com/v2/resize:fit:1100/format:webp/0*gx5m_CS7gVUn8WLH.gif')

    st.markdown("#### B∆∞·ªõc 5: √Åp d·ª•ng c√°c k·ªπ thu·∫≠t t·ªëi ∆∞u (early exaggeration, early compression)")
    st.write(" - C·∫£i thi·ªán ph√¢n t√°ch c·ª•m v√† tr√°nh ch·ªìng ch√©o.")

    st.markdown("#### B∆∞·ªõc 6: Tr·∫£ v·ªÅ bi·ªÉu di·ªÖn tr·ª±c quan cu·ªëi c√πng")
    st.write(" - Thu b·∫£n ƒë·ªì 2D/3D hi·ªÉn th·ªã c·∫•u tr√∫c c·ª•c b·ªô.")

    st.markdown("**L∆∞u √Ω**: t-SNE t·∫≠p trung v√†o b·∫£o t·ªìn c·∫•u tr√∫c c·ª•c b·ªô, kh√¥ng ph·∫£i kho·∫£ng c√°ch to√†n c·ª•c.")

# ----------- Tab 2: Th·ª±c hi·ªán gi·∫£m chi·ªÅu -----------
with tab2:
    st.title("Tr·ª±c quan h√≥a PCA & t-SNE tr√™n MNIST")
    
    # Fragment cho t·∫£i d·ªØ li·ªáu
    @st.fragment
    def load_data_interface():
        if not st.session_state.mnist_loaded:
            sample_size = st.number_input(
                "Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u d·ªØ li·ªáu s·ª≠ d·ª•ng",
                min_value=1000,
                max_value=70000,
                value=10000,
                step=1000,
                help="Ch·ªçn s·ªë m·∫´u d·ªØ li·ªáu ƒë·ªÉ gi·∫£m th·ªùi gian t√≠nh to√°n (m·∫∑c ƒë·ªãnh 10,000)"
            )
            if st.button("T·∫£i d·ªØ li·ªáu MNIST"):
                X, y, total_samples = tai_du_lieu_MNIST(sample_size)
                st.session_state.X = X
                st.session_state.y = y
                st.session_state.total_samples = total_samples
                st.session_state.mnist_loaded = True
                st.success(f"D·ªØ li·ªáu MNIST ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªõi {sample_size} m·∫´u!")
    
    load_data_interface()
    
    if st.session_state.mnist_loaded:
        X = st.session_state.X
        y = st.session_state.y
        st.write("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
        
        option = st.radio(
            "Ch·ªçn thu·∫≠t to√°n c·∫ßn ch·∫°y:",
            ("PCA", "t-SNE"),
            help="Ch·ªçn PCA ƒë·ªÉ thu g·ªçn d·ªØ li·ªáu ho·∫∑c t-SNE ƒë·ªÉ tr·ª±c quan h√≥a kh√¥ng gian d·ªØ li·ªáu."
        )
        
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        
        if option == "PCA":
            st.subheader("C·∫•u h√¨nh PCA")
            n_components = st.slider(
                "Ch·ªçn s·ªë th√†nh ph·∫ßn (n_components)",
                2, 50, 2,
                help="S·ªë th√†nh ph·∫ßn ch√≠nh c·∫ßn gi·ªØ l·∫°i."
            )
            
            experiment_name_pca = st.text_input(
                "ƒê·∫∑t t√™n cho th√≠ nghi·ªám MLflow (PCA)",
                value=f"Experiment_PCA_{datetime.datetime.now().strftime('%Y%m%d-%H%M%S')}"
            )
            
            # Fragment cho ch·∫°y PCA
            @st.fragment
            def run_pca():
                if st.button("Ch·∫°y PCA", key="btn_pca"):
                    mlflow.set_experiment(experiment_name_pca)
                    st.session_state.experiment_name = experiment_name_pca
                    st.write("T√™n th√≠ nghi·ªám:", experiment_name_pca)
                    
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    with st.spinner("ƒêang t√≠nh to√°n PCA..."):
                        status_text.text("ƒêang chu·∫©n h√≥a d·ªØ li·ªáu...")
                        progress_bar.progress(10)
                        
                        status_text.text("ƒêang th·ª±c hi·ªán PCA...")
                        pca = PCA(n_components=n_components)
                        X_pca = pca.fit_transform(X_scaled)
                        st.session_state.X_pca = X_pca
                        
                        explained_variance_ratio = pca.explained_variance_ratio_
                        total_variance = sum(explained_variance_ratio)
                        
                        progress_bar.progress(100)
                        status_text.text("Ho√†n th√†nh PCA!")
                    
                    st.success("PCA ƒë√£ ƒë∆∞·ª£c t√≠nh!")
                    
                    st.subheader("K·∫øt qu·∫£ PCA")
                    if n_components == 2:
                        fig_pca = ve_bieu_do(X_pca[:, :2], y, "Tr·ª±c quan h√≥a PCA 2D")
                        st.plotly_chart(fig_pca, use_container_width=True, renderer="plotly_mimetype")
                    elif n_components == 3:
                        fig_pca = ve_bieu_do_3d(X_pca, yPrerun(fig_pca)
                        st.plotly_chart(fig_pca, use_container_width=True, renderer="plotly_mimetype")
                    else:
                        st.write("**T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch cho t·ª´ng chi·ªÅu:**", explained_variance_ratio)
                        st.write("**T·ªïng t·ª∑ l·ªá ph∆∞∆°ng sai gi·ªØ l·∫°i:**", total_variance)
                    
                    with mlflow.start_run():
                        mlflow.log_param("n_components", n_components)
                        mlflow.log_metric("total_explained_variance", total_variance)
                    st.success("K·∫øt qu·∫£ PCA ƒë√£ ƒë∆∞·ª£c l∆∞u v·ªõi MLflow!")
            
            run_pca()
        
        elif option == "t-SNE":
            st.subheader("C·∫•u h√¨nh t-SNE")
            n_components = st.slider(
                "Ch·ªçn s·ªë chi·ªÅu ƒë·∫ßu ra (n_components)",
                2, 50, 2,
                help="S·ªë chi·ªÅu ƒë·ªÉ gi·∫£m."
            )
            
            experiment_name_tsne = st.text_input(
                "ƒê·∫∑t t√™n cho th√≠ nghi·ªám MLflow (t-SNE)",
                value=f"Experiment_tSNE_{datetime.datetime.now().strftime('%Y%m%d-%H%M%S')}"
            )
            
            # Fragment cho ch·∫°y t-SNE
            @st.fragment
            def run_tsne():
                if st.button("Ch·∫°y t-SNE", key="btn_tsne"):
                    mlflow.set_experiment(experiment_name_tsne)
                    st.session_state.experiment_name = experiment_name_tsne
                    st.write("T√™n th√≠ nghi·ªám:", experiment_name_tsne)
                    
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    with st.spinner("ƒêang t√≠nh to√°n t-SNE..."):
                        status_text.text("ƒêang chu·∫©n h√≥a d·ªØ li·ªáu...")
                        progress_bar.progress(10)
                        
                        method = 'barnes_hut' if n_components <= 3 else 'exact'
                        status_text.text("ƒêang th·ª±c hi·ªán t-SNE... (c√≥ th·ªÉ m·∫•t v√†i ph√∫t)")
                        tsne = TSNE(n_components=n_components, method=method, random_state=42)
                        progress_bar.progress(50)
                        X_tsne = tsne.fit_transform(X_scaled)
                        st.session_state.X_tsne = X_tsne
                        
                        progress_bar.progress(100)
                        status_text.text("Ho√†n th√†nh t-SNE!")
                    
                    st.success("t-SNE ƒë√£ ƒë∆∞·ª£c t√≠nh!")
                    
                    st.subheader("K·∫øt qu·∫£ t-SNE")
                    if n_components == 2:
                        fig_tsne = ve_bieu_do(X_tsne, y, "Tr·ª±c quan h√≥a t-SNE 2D")
                        st.plotly_chart(fig_tsne, use_container_width=True, renderer="plotly_mimetype")
                    elif n_components == 3:
                        fig_tsne = ve_bieu_do_3d(X_tsne, y, "Tr·ª±c quan h√≥a t-SNE 3D")
                        st.plotly_chart(fig_tsne, use_container_width=True, renderer="plotly_mimetype")
                    else:
                        kl_divergence = tsne.kl_divergence_
                        st.write("**Gi√° tr·ªã KL Divergence:**", kl_divergence)
                        st.info("KL Divergence c√†ng nh·ªè th√¨ c·∫•u tr√∫c c·ª•c b·ªô c√†ng ƒë∆∞·ª£c b·∫£o to√†n t·ªët.")
                    
                    with mlflow.start_run():
                        mlflow.log_param("n_components", n_components)
                        mlflow.log_param("method", method)
                        if n_components > 3:
                            mlflow.log_metric("kl_divergence", kl_divergence)
                    st.success("K·∫øt qu·∫£ t-SNE ƒë√£ ƒë∆∞·ª£c l∆∞u v·ªõi MLflow!")
            
            run_tsne()

# ----------- Tab 3: MLflow -----------
with tab3:
    st.header("Tracking MLflow")
    try:
        from mlflow.tracking import MlflowClient
        client = MlflowClient()
    
        experiments = mlflow.search_experiments()
        if experiments:
            st.write("#### Danh s√°ch th√≠ nghi·ªám")
            experiment_data = [{"Experiment ID": exp.experiment_id, "Experiment Name": exp.name, "Artifact Location": exp.artifact_location} for exp in experiments]
            df_experiments = pd.DataFrame(experiment_data)
            st.dataframe(df_experiments)
    
            selected_exp_name = st.selectbox("üîç Ch·ªçn th√≠ nghi·ªám ƒë·ªÉ xem chi ti·∫øt", options=[exp.name for exp in experiments])
            selected_exp_id = next(exp.experiment_id for exp in experiments if exp.name == selected_exp_name)
    
            runs = mlflow.search_runs(selected_exp_id)
            if not runs.empty:
                st.write("#### Danh s√°ch runs")
                st.dataframe(runs)
    
                selected_run_id = st.selectbox("üîç Ch·ªçn run ƒë·ªÉ xem chi ti·∫øt", options=runs["run_id"])
                run = mlflow.get_run(selected_run_id)
                st.write("##### Th√¥ng tin run")
                st.write(f"*Run ID:* {run.info.run_id}")
                st.write(f"*Experiment ID:* {run.info.experiment_id}")
                st.write(f"*Start Time:* {run.info.start_time}")
    
                st.write("##### Metrics")
                st.json(run.data.metrics)
    
                st.write("##### Params")
                st.json(run.data.params)
    
                artifacts = client.list_artifacts(selected_run_id)
                if artifacts:
                    st.write("##### Artifacts")
                    for artifact in artifacts:
                        st.write(f"- {artifact.path}")
            else:
                st.warning("Kh√¥ng c√≥ runs n√†o trong th√≠ nghi·ªám n√†y.")
        else:
            st.warning("Kh√¥ng c√≥ th√≠ nghi·ªám n√†o ƒë∆∞·ª£c t√¨m th·∫•y.")
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch th√≠ nghi·ªám: {e}")
