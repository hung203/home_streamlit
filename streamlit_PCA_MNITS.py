import numpy as np
import pandas as pd
import streamlit as st
import mlflow
import mlflow.sklearn
import matplotlib
matplotlib.use('Agg')  # ƒê·∫£m b·∫£o kh√¥ng d√πng GUI backend
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.datasets import fetch_openml
import datetime
import plotly.express as px

mlflow.set_tracking_uri("file:./mlruns")

# ------------------ KHAI B√ÅO BI·∫æN TR·∫†NG TH√ÅI ------------------
if "mnist_loaded" not in st.session_state:
    st.session_state.mnist_loaded = False
if "X_pca" not in st.session_state:
    st.session_state.X_pca = None

# ------------------ H√ÄM T·∫¢I D·ªÆ LI·ªÜU MNIST (CACHED) ------------------
@st.cache_data
def tai_du_lieu_MNIST(sample_size):
    mnist = fetch_openml('mnist_784', version=1, as_frame=False, cache=True)
    X, y = mnist.data / 255.0, mnist.target.astype(int)
    total_samples = mnist.data.shape[0]
    if sample_size < total_samples:
        X, _, y, _ = train_test_split(
            X, y, train_size=sample_size, random_state=42, stratify=y
        )
    return X, y, total_samples

# ------------------ H√ÄM V·∫º BI·ªÇU ƒê·ªí TR·ª∞C QUAN H√ìA ------------------
@st.cache_data
def ve_bieu_do(X, y, title):
    df = pd.DataFrame({
        'X': X[:, 0],
        'Y': X[:, 1],
        'Label': y.astype(str)
    })
    fig = px.scatter(
        df,
        x='X', y='Y', color='Label', title=title,
        labels={'X': 'Th√†nh ph·∫ßn 1', 'Y': 'Th√†nh ph·∫ßn 2'},
        color_discrete_sequence=px.colors.qualitative.T10 if len(set(y)) <= 10 else px.colors.qualitative.Dark24,
        opacity=0.7, height=600
    )
    fig.update_layout(
        legend_title_text='Ch·ªØ s·ªë', title_font_size=14,
        xaxis_title_font_size=12, yaxis_title_font_size=12,
        legend=dict(x=1.05, y=1)
    )
    return fig

@st.cache_data
def ve_bieu_do_3d(X, y, title):
    df = pd.DataFrame({
        'X': X[:, 0], 'Y': X[:, 1], 'Z': X[:, 2],
        'Label': y.astype(str)
    })
    fig = px.scatter_3d(
        df,
        x='X', y='Y', z='Z', color='Label', title=title,
        labels={'X': 'Th√†nh ph·∫ßn 1', 'Y': 'Th√†nh ph·∫ßn 2', 'Z': 'Th√†nh ph·∫ßn 3'},
        color_discrete_sequence=px.colors.qualitative.T10 if len(set(y)) <= 10 else px.colors.qualitative.Dark24,
        opacity=0.7, height=600
    )
    fig.update_layout(
        legend_title_text='Ch·ªØ s·ªë', title_font_size=14,
        scene=dict(
            xaxis_title='Th√†nh ph·∫ßn 1', yaxis_title='Th√†nh ph·∫ßn 2', zaxis_title='Th√†nh ph·∫ßn 3',
            xaxis_title_font_size=12, yaxis_title_font_size=12, zaxis_title_font_size=12
        ),
        legend=dict(x=1.05, y=1)
    )
    return fig

# ------------------ T·∫†O 3 TAB ------------------
tab1, tab2, tab3 = st.tabs(["L√Ω thuy·∫øt v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu", "Th·ª±c hi·ªán gi·∫£m chi·ªÅu", "MLflow"])

# ----------- Tab 1: L√Ω thuy·∫øt v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu -----------
with tab1:
    st.header("L√Ω thuy·∫øt v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu")
    st.markdown(r"""
    ### Gi·ªõi thi·ªáu v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu üöÄ
    **Gi·∫£m chi·ªÅu d·ªØ li·ªáu** l√† qu√° tr√¨nh chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ kh√¥ng gian c√≥ s·ªë chi·ªÅu cao sang kh√¥ng gian c√≥ s·ªë chi·ªÅu th·∫•p h∆°n m√† v·∫´n gi·ªØ l·∫°i ƒë∆∞·ª£c nh·ªØng ƒë·∫∑c tr∆∞ng quan tr·ªçng nh·∫•t. Qu√° tr√¨nh n√†y gi√∫p:
    - **Tr·ª±c quan h√≥a d·ªØ li·ªáu üìä:** Hi·ªÉn th·ªã d·ªØ li·ªáu trong 2D ho·∫∑c 3D.
    - **Gi·∫£m nhi·ªÖu v√† tƒÉng t·ªëc ƒë·ªô t√≠nh to√°n ‚ö°:** Lo·∫°i b·ªè ƒë·∫∑c tr∆∞ng d∆∞ th·ª´a, tr√°nh overfitting.
    """)

    st.header("üìå L√Ω thuy·∫øt v·ªÅ PCA", divider="blue")
    st.subheader("üîπ PCA l√† g√¨?")
    st.write("PCA chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh c√°c th√†nh ph·∫ßn ch√≠nh gi·ªØ ph·∫ßn l·ªõn ph∆∞∆°ng sai.")
    
    st.subheader("2Ô∏è‚É£ C√°c b∆∞·ªõc th·ª±c hi·ªán PCA", divider="blue")
    st.markdown("#### **B∆∞·ªõc 1: T√¨m vector trung b√¨nh**")
    st.write(r"Vector trung b√¨nh: $\mathbf{\mu} = \frac{1}{N} \sum_{i=1}^{N} \mathbf{x}_i$")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("image/Screenshot 2025-03-12 203225.png")

    st.markdown("#### **B∆∞·ªõc 2: Tr·ª´ vector trung b√¨nh**")
    st.write(r"D·ªØ li·ªáu chu·∫©n h√≥a: $\hat{\mathbf{X}} = \mathbf{X} - \mathbf{\mu}$")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("image/Screenshot 2025-03-12 203258.png")

    st.markdown("#### **B∆∞·ªõc 3: T√≠nh ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai**")
    st.write(r"$\mathbf{S} = \frac{1}{N} \hat{\mathbf{X}}^T \hat{\mathbf{X}}$")
    
    st.markdown("#### **B∆∞·ªõc 4: T√≠nh gi√° tr·ªã ri√™ng v√† vector ri√™ng**")
    st.write(r"T√¨m $\lambda_i$ v√† $\mathbf{u}_i$ sao cho $\mathbf{S} \mathbf{u}_i = \lambda_i \mathbf{u}_i$")
    
    st.markdown("#### **B∆∞·ªõc 5: Ch·ªçn $K$ vector ri√™ng**")
    st.write(r"Ch·ªçn $K$ $\mathbf{u}_i$ c√≥ $\lambda_i$ l·ªõn nh·∫•t.")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("image/Screenshot 2025-03-12 203337.png")

    st.markdown("#### **B∆∞·ªõc 6: Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu**")
    st.write(r"$\mathbf{Z} = \hat{\mathbf{X}} \mathbf{U}_K$, v·ªõi $\mathbf{U}_K$ l√† ma tr·∫≠n $K$ vector ri√™ng.")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("image/Screenshot 2025-03-12 203327.png")

    st.markdown("#### **B∆∞·ªõc 7: K·∫øt qu·∫£**")
    st.write(r"$\mathbf{Z}$ l√† d·ªØ li·ªáu trong kh√¥ng gian $K$ chi·ªÅu.")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("image/Screenshot 2025-03-12 203306.png")

    st.header("üìå L√Ω thuy·∫øt v·ªÅ t-SNE", divider="blue")
    st.markdown("#### B∆∞·ªõc 1: T√≠nh \( p_{j|i} \)")
    st.write("D√πng Gaussian: \( p_{j|i} = \frac{\exp(-||x_i - x_j||^2 / 2\sigma_i^2)}{\sum_{k \neq i} \exp(-||x_i - x_k||^2 / 2\sigma_i^2)} \)")
    st.image('https://miro.medium.com/v2/resize:fit:4800/format:webp/0*pTTqRArwYV_tGnF0.png')

    st.markdown("#### B∆∞·ªõc 2: Kh·ªüi t·∫°o ng·∫´u nhi√™n")
    st.write("Kh·ªüi t·∫°o \( y_i \) trong kh√¥ng gian th·∫•p.")
    st.image('https://miro.medium.com/v2/resize:fit:1100/format:webp/0*sNHrck20Xt7uS7X9.png')

    st.markdown("#### B∆∞·ªõc 3: T√≠nh \( q_{ij} \)")
    st.write(r"D√πng Student-t: \( q_{ij} = \frac{(1 + ||y_i - y_j||^2)^{-1}}{\sum_{k \neq l} (1 + ||y_k - y_l||^2)^{-1}} \)")
    
    st.markdown("#### B∆∞·ªõc 4: T·ªëi ∆∞u h√≥a")
    st.write(r"Gi·∫£m KL Divergence: \( KL(P||Q) = \sum_{i \neq j} p_{ij} \log \frac{p_{ij}}{q_{ij}} \)")
    st.image('https://miro.medium.com/v2/resize:fit:1100/format:webp/0*gx5m_CS7gVUn8WLH.gif')

    st.markdown("#### B∆∞·ªõc 5: K·ªπ thu·∫≠t t·ªëi ∆∞u")
    st.write("D√πng early exaggeration v√† compression.")
    
    st.markdown("#### B∆∞·ªõc 6: K·∫øt qu·∫£")
    st.write("Bi·ªÉu di·ªÖn d·ªØ li·ªáu trong 2D/3D.")

# ----------- Tab 2: Th·ª±c hi·ªán gi·∫£m chi·ªÅu -----------
with tab2:
    st.title("Tr·ª±c quan h√≥a PCA & t-SNE tr√™n MNIST")
    
    sample_size = st.number_input(
        "Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u d·ªØ li·ªáu s·ª≠ d·ª•ng", min_value=1000, max_value=10000, value=5000, step=1000
    )
    if st.button("T·∫£i d·ªØ li·ªáu MNIST"):
        X, y, total_samples = tai_du_lieu_MNIST(sample_size)
        st.session_state.X = X
        st.session_state.y = y
        st.session_state.total_samples = total_samples
        st.session_state.mnist_loaded = True
        st.success(f"D·ªØ li·ªáu MNIST ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªõi {sample_size} m·∫´u!")

    if st.session_state.mnist_loaded:
        X = st.session_state.X
        y = st.session_state.y
        
        option = st.radio("Ch·ªçn thu·∫≠t to√°n:", ("PCA", "t-SNE"))
        scaler = StandardScaler()
        
        @st.cache_data
        def standardize_data(X):
            return scaler.fit_transform(X)
        
        X_scaled = standardize_data(X)
        
        if option == "PCA":
            st.subheader("C·∫•u h√¨nh PCA")
            n_components = st.slider("S·ªë th√†nh ph·∫ßn", 2, 10, 2)  # Gi·ªõi h·∫°n ƒë·ªÉ nh·∫π h∆°n
            
            if st.button("Ch·∫°y PCA", key="btn_pca"):
                with st.spinner("ƒêang t√≠nh to√°n PCA..."):
                    pca = PCA(n_components=n_components)
                    X_pca = pca.fit_transform(X_scaled)
                    st.session_state.X_pca = X_pca
                    
                    explained_variance_ratio = pca.explained_variance_ratio_
                    total_variance = sum(explained_variance_ratio)
                
                st.success("PCA ho√†n th√†nh!")
                if n_components == 2:
                    fig_pca = ve_bieu_do(X_pca[:, :2], y, "Tr·ª±c quan h√≥a PCA 2D")
                    st.plotly_chart(fig_pca, use_container_width=True)
                elif n_components == 3:
                    fig_pca = ve_bieu_do_3d(X_pca, y, "Tr·ª±c quan h√≥a PCA 3D")
                    st.plotly_chart(fig_pca, use_container_width=True)
                else:
                    st.write("T·ª∑ l·ªá ph∆∞∆°ng sai:", explained_variance_ratio)
                    st.write("T·ªïng ph∆∞∆°ng sai:", total_variance)
                
                experiment_name = f"PCA_{datetime.datetime.now().strftime('%Y%m%d-%H%M%S')}"
                mlflow.set_experiment(experiment_name)
                with mlflow.start_run():
                    mlflow.log_param("n_components", n_components)
                    mlflow.log_metric("total_explained_variance", total_variance)
        
        elif option == "t-SNE":
            st.subheader("C·∫•u h√¨nh t-SNE")
            n_components = st.slider("S·ªë chi·ªÅu", 2, 3, 2)  # Gi·ªõi h·∫°n ƒë·ªÉ tr√°nh n·∫∑ng
            
            if st.button("Ch·∫°y t-SNE", key="btn_tsne"):
                with st.spinner("ƒêang t√≠nh to√°n t-SNE..."):
                    tsne = TSNE(n_components=n_components, method='barnes_hut', random_state=42)
                    X_tsne = tsne.fit_transform(X_scaled[:5000])  # Gi·ªõi h·∫°n m·∫´u ƒë·ªÉ nhanh h∆°n
                
                st.success("t-SNE ho√†n th√†nh!")
                if n_components == 2:
                    fig_tsne = ve_bieu_do(X_tsne, y[:5000], "Tr·ª±c quan h√≥a t-SNE 2D")
                    st.plotly_chart(fig_tsne, use_container_width=True)
                elif n_components == 3:
                    fig_tsne = ve_bieu_do_3d(X_tsne, y[:5000], "Tr·ª±c quan h√≥a t-SNE 3D")
                    st.plotly_chart(fig_tsne, use_container_width=True)
                
                experiment_name = f"tSNE_{datetime.datetime.now().strftime('%Y%m%d-%H%M%S')}"
                mlflow.set_experiment(experiment_name)
                with mlflow.start_run():
                    mlflow.log_param("n_components", n_components)
                    mlflow.log_metric("kl_divergence", tsne.kl_divergence_)

# ----------- Tab 3: MLflow -----------
with tab3:
    st.header("Tracking MLflow")
    try:
        from mlflow.tracking import MlflowClient
        client = MlflowClient()
        experiments = mlflow.search_experiments()
        
        if experiments:
            experiment_data = [{"ID": exp.experiment_id, "Name": exp.name} for exp in experiments]
            st.dataframe(pd.DataFrame(experiment_data))
            
            selected_exp_name = st.selectbox("Ch·ªçn th√≠ nghi·ªám", [exp.name for exp in experiments])
            selected_exp_id = next(exp.experiment_id for exp in experiments if exp.name == selected_exp_name)
            
            runs = mlflow.search_runs(selected_exp_id)
            if not runs.empty:
                st.dataframe(runs[["run_id", "start_time", "status"]])
                
                selected_run_id = st.selectbox("Ch·ªçn run", runs["run_id"])
                run = mlflow.get_run(selected_run_id)
                st.write(f"Run ID: {run.info.run_id}")
                st.write(f"Metrics: {run.data.metrics}")
                st.write(f"Params: {run.data.params}")
        else:
            st.warning("Kh√¥ng c√≥ th√≠ nghi·ªám n√†o.")
    except Exception as e:
        st.error(f"L·ªói: {e}")
