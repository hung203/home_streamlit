import pandas as pd
import streamlit as st
import mlflow
import mlflow.sklearn
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.datasets import fetch_openml
import datetime

# ------------------ KHAI B√ÅO BI·∫æN TR·∫†NG TH√ÅI ------------------
if "mnist_loaded" not in st.session_state:
    st.session_state.mnist_loaded = False
if "X_pca" not in st.session_state:
    st.session_state.X_pca = None

# ------------------ H√ÄM T·∫¢I D·ªÆ LI·ªÜU MNIST ------------------
def tai_du_lieu_MNIST():
    if "mnist_data" not in st.session_state:
        mnist = fetch_openml('mnist_784', version=1, as_frame=False)
        st.session_state.mnist_data = mnist
        st.session_state.total_samples = mnist.data.shape[0]
    
    sample_size = st.number_input(
        "Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u d·ªØ li·ªáu s·ª≠ d·ª•ng",
        min_value=1000,
        max_value=st.session_state.total_samples,
        value=st.session_state.total_samples,
        step=1000,
        help="Ch·ªçn s·ªë m·∫´u d·ªØ li·ªáu ƒë·ªÉ gi·∫£m th·ªùi gian t√≠nh to√°n (m·∫∑c ƒë·ªãnh l√† to√†n b·ªô d·ªØ li·ªáu)"
    )
    
    if st.button("T·∫£i d·ªØ li·ªáu MNIST"):
        mnist = st.session_state.mnist_data
        X, y = mnist.data / 255.0, mnist.target.astype(int)
        if sample_size < st.session_state.total_samples:
            X, _, y, _ = train_test_split(
                X, y, train_size=sample_size, random_state=42, stratify=y
            )
        st.session_state.X = X
        st.session_state.y = y
        st.session_state.mnist_loaded = True
        st.success(f"D·ªØ li·ªáu MNIST ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªõi {sample_size} m·∫´u!")

# ------------------ H√ÄM V·∫º BI·ªÇU ƒê·ªí TR·ª∞C QUAN H√ìA ------------------
def ve_bieu_do(X_embedded, y, tieu_de):
    fig, ax = plt.subplots(figsize=(8, 6))
    scatter = ax.scatter(X_embedded[:, 0], X_embedded[:, 1], c=y, cmap='tab10', alpha=0.6)
    ax.set_title(tieu_de)
    ax.set_xlabel("Th√†nh ph·∫ßn 1")
    ax.set_ylabel("Th√†nh ph·∫ßn 2")
    plt.colorbar(scatter, ax=ax, label="Ch·ªØ s·ªë")
    return fig

# ------------------ T·∫†O 3 TAB ------------------
tab1, tab2, tab3 = st.tabs(["L√Ω thuy·∫øt v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu", "Th·ª±c hi·ªán gi·∫£m chi·ªÅu", "MLflow"])

# ----------- Tab 1: L√Ω thuy·∫øt v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu -----------
with tab1:
    st.header("L√Ω thuy·∫øt v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu")
    st.markdown(r"""
    ### Gi·ªõi thi·ªáu v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu üöÄ
    **Gi·∫£m chi·ªÅu d·ªØ li·ªáu** l√† qu√° tr√¨nh chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ kh√¥ng gian c√≥ s·ªë chi·ªÅu cao (v·ªõi nhi·ªÅu ƒë·∫∑c tr∆∞ng) sang kh√¥ng gian c√≥ s·ªë chi·ªÅu th·∫•p h∆°n m√† v·∫´n gi·ªØ l·∫°i ƒë∆∞·ª£c nh·ªØng ƒë·∫∑c tr∆∞ng quan tr·ªçng nh·∫•t. Qu√° tr√¨nh n√†y gi√∫p:
    - **Tr·ª±c quan h√≥a d·ªØ li·ªáu üìä:** Hi·ªÉn th·ªã d·ªØ li·ªáu trong kh√¥ng gian 2D ho·∫∑c 3D, t·ª´ ƒë√≥ d·ªÖ d√†ng nh·∫≠n bi·∫øt c·∫•u tr√∫c, nh√≥m (clusters) hay c√°c m·ªëi li√™n h·ªá gi·ªØa c√°c m·∫´u.
    - **Gi·∫£m nhi·ªÖu v√† tƒÉng t·ªëc ƒë·ªô t√≠nh to√°n ‚ö°:** Lo·∫°i b·ªè nh·ªØng ƒë·∫∑c tr∆∞ng d∆∞ th·ª´a, kh√¥ng c·∫ßn thi·∫øt gi√∫p m√¥ h√¨nh h·ªçc m√°y ch·∫°y nhanh h∆°n v√† tr√°nh t√¨nh tr·∫°ng qu√° kh·ªõp (overfitting).

    ### C√°c ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu d·ªØ li·ªáu ph·ªï bi·∫øn üîç

    #### 1. PCA (Principal Component Analysis) üí°
    - **Nguy√™n l√Ω:**  
      PCA t√¨m c√°c th√†nh ph·∫ßn ch√≠nh sao cho ph·∫ßn l·ªõn ph∆∞∆°ng sai c·ªßa d·ªØ li·ªáu ƒë∆∞·ª£c gi·ªØ l·∫°i. Gi·∫£ s·ª≠ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c trung b√¨nh h√≥a, ta c√≥:
      
      - **Ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai:**
      $$ \Sigma = \frac{1}{n-1} X^T X $$
      
      - **Ph√¢n t√≠ch gi√° tr·ªã ri√™ng:**
      $$ \Sigma v = \lambda v $$
      
      - **Chi·∫øu d·ªØ li·ªáu l√™n kh√¥ng gian c√°c th√†nh ph·∫ßn ch√≠nh:**
      $$ Z = XW $$
      
      Trong ƒë√≥, **W** l√† ma tr·∫≠n ch·ª©a c√°c vector ri√™ng (eigenvectors) t∆∞∆°ng ·ª©ng v·ªõi c√°c gi√° tr·ªã ri√™ng (eigenvalues) l·ªõn nh·∫•t.

    #### 2. t-SNE (t-distributed Stochastic Neighbor Embedding) üî•
    - **Nguy√™n l√Ω:**  
      t-SNE tr·ª±c quan h√≥a d·ªØ li·ªáu b·∫±ng c√°ch chuy·ªÉn ƒë·ªïi kho·∫£ng c√°ch gi·ªØa c√°c ƒëi·ªÉm trong kh√¥ng gian cao chi·ªÅu th√†nh x√°c su·∫•t, sau ƒë√≥ t√°i hi·ªán c√°c m·ªëi quan h·ªá n√†y trong kh√¥ng gian 2D ho·∫∑c 3D:
      
      - **X√°c su·∫•t kho·∫£ng c√°ch trong kh√¥ng gian cao chi·ªÅu:**
      $$ p_{j|i} = \frac{\exp(-\|x_i - x_j\|^2 / 2\sigma_i^2)}{\sum_{k \neq i}\exp(-\|x_i - x_k\|^2 / 2\sigma_i^2)} $$
      
      - **X√°c su·∫•t ƒë·ªëi x·ª©ng:**
      $$ p_{ij} = \frac{p_{j|i} + p_{i|j}}{2n} $$
      
      - **Trong kh√¥ng gian th·∫•p chi·ªÅu, s·ª≠ d·ª•ng ph√¢n ph·ªëi Student‚Äôs t:**
      $$ q_{ij} = \frac{(1+\|y_i-y_j\|^2)^{-1}}{\sum_{k \neq l}(1+\|y_k-y_l\|^2)^{-1}} $$
      
      - **H√†m m·∫•t m√°t Kullback-Leibler c·∫ßn t·ªëi thi·ªÉu h√≥a:**
      $$ KL(P\|Q) = \sum_{i \neq j} p_{ij} \log \frac{p_{ij}}{q_{ij}} $$
      
    ### ·ª®ng d·ª•ng c·ªßa gi·∫£m chi·ªÅu d·ªØ li·ªáu üíº
    - **Tr·ª±c quan h√≥a d·ªØ li·ªáu:**  
      Gi√∫p c√°c nh√† khoa h·ªçc d·ªØ li·ªáu v√† k·ªπ s∆∞ hi·ªÉu ƒë∆∞·ª£c c·∫•u tr√∫c n·ªôi t·∫°i c·ªßa d·ªØ li·ªáu, nh·∫≠n di·ªán c√°c m·∫´u b·∫•t th∆∞·ªùng v√† ph√¢n nh√≥m d·ªØ li·ªáu.
    - **Ti·ªÅn x·ª≠ l√Ω cho h·ªçc m√°y:**  
      Gi·∫£m s·ªë chi·ªÅu d·ªØ li·ªáu gi√∫p gi·∫£m ƒë·ªô ph·ª©c t·∫°p c·ªßa m√¥ h√¨nh, tƒÉng hi·ªáu su·∫•t t√≠nh to√°n v√† gi·∫£m nguy c∆° qu√° kh·ªõp.
    - **Khai ph√° d·ªØ li·ªáu:**  
      Ph√°t hi·ªán c√°c m·ªëi quan h·ªá ·∫©n, hi·ªÉu s√¢u h∆°n v·ªÅ d·ªØ li·ªáu v√† ƒë∆∞a ra c√°c quy·∫øt ƒë·ªãnh kinh doanh d·ª±a tr√™n d·ªØ li·ªáu.
    
    ### L∆∞u √Ω khi th·ª±c hi·ªán gi·∫£m chi·ªÅu d·ªØ li·ªáu ‚ö†Ô∏è
    - **L·ª±a ch·ªçn thu·∫≠t to√°n:**  
      T√πy v√†o ƒë·∫∑c ƒëi·ªÉm c·ªßa d·ªØ li·ªáu v√† m·ª•c ti√™u ph√¢n t√≠ch m√† b·∫°n c√≥ th·ªÉ l·ª±a ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu ph√π h·ª£p (PCA cho d·ªØ li·ªáu tuy·∫øn t√≠nh, t-SNE cho d·ªØ li·ªáu phi tuy·∫øn).
    - **Tinh ch·ªânh tham s·ªë:**  
      C√°c tham s·ªë nh∆∞ s·ªë l∆∞·ª£ng th√†nh ph·∫ßn trong PCA, perplexity v√† learning rate trong t-SNE r·∫•t quan tr·ªçng v√† c·∫ßn ƒë∆∞·ª£c th·ª≠ nghi·ªám ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c k·∫øt qu·∫£ t·ªët nh·∫•t.
    - **Hi·ªÉu r√µ d·ªØ li·ªáu:**  
      Ph√¢n t√≠ch v√† hi·ªÉu r√µ d·ªØ li·ªáu ban ƒë·∫ßu s·∫Ω gi√∫p vi·ªác l·ª±a ch·ªçn ph∆∞∆°ng ph√°p v√† c·∫•u h√¨nh tham s·ªë tr·ªü n√™n hi·ªáu qu·∫£ h∆°n.
    """)

# ----------- Tab 2: Th·ª±c hi·ªán gi·∫£m chi·ªÅu -----------
import streamlit as st
import plotly.express as px
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler
import datetime
import mlflow
import pandas as pd

# H√†m v·∫Ω bi·ªÉu ƒë·ªì 2D (Matplotlib)
def ve_bieu_do(X, y, title):
    import matplotlib.pyplot as plt
    fig = plt.figure(figsize=(10, 8))
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap='viridis', s=10)
    plt.colorbar()
    plt.title(title)
    plt.xlabel('X')
    plt.ylabel('Y')
    return fig

# H√†m v·∫Ω bi·ªÉu ƒë·ªì 3D t∆∞∆°ng t√°c (Plotly)
def ve_bieu_do_3d(X, y, title):
    df = pd.DataFrame({
        'X': X[:, 0],
        'Y': X[:, 1],
        'Z': X[:, 2],
        'Label': y
    })
    fig = px.scatter_3d(
        df, 
        x='X', 
        y='Y', 
        z='Z', 
        color='Label', 
        title=title,
        color_continuous_scale='Viridis',
        opacity=0.7,
        height=600
    )
    fig.update_layout(
        scene=dict(
            xaxis_title='X',
            yaxis_title='Y',
            zaxis_title='Z'
        )
    )
    return fig

with tab2:
    st.title("Tr·ª±c quan h√≥a PCA & t-SNE tr√™n MNIST")
    if not st.session_state.mnist_loaded:
        tai_du_lieu_MNIST()
    
    if st.session_state.mnist_loaded:
        X = st.session_state.X
        y = st.session_state.y
        st.write("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
    
        option = st.radio(
            "Ch·ªçn thu·∫≠t to√°n c·∫ßn ch·∫°y:",
            ("PCA", "t-SNE"),
            help="Ch·ªçn PCA ƒë·ªÉ thu g·ªçn d·ªØ li·ªáu ho·∫∑c t-SNE ƒë·ªÉ tr·ª±c quan h√≥a kh√¥ng gian d·ªØ li·ªáu."
        )
        
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        
        if option == "PCA":
            st.subheader("C·∫•u h√¨nh PCA")
            n_components = st.slider(
                "Ch·ªçn s·ªë th√†nh ph·∫ßn (n_components)",
                2, 50, 2,
                help="S·ªë th√†nh ph·∫ßn ch√≠nh c·∫ßn gi·ªØ l·∫°i. N·∫øu > 3, hi·ªÉn th·ªã t·ª∑ l·ªá ph∆∞∆°ng sai thay v√¨ h√¨nh ·∫£nh."
            )
            
            if st.button("Ch·∫°y PCA", key="btn_pca"):
                timestamp = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
                experiment_name = f"Experiment_PCA_{timestamp}"
                mlflow.set_experiment(experiment_name)
                st.session_state.experiment_name = experiment_name
                st.write("T√™n th√≠ nghi·ªám:", experiment_name)
                
                pca = PCA(n_components=n_components)
                X_pca = pca.fit_transform(X_scaled)
                st.session_state.X_pca = X_pca
                st.success("PCA ƒë√£ ƒë∆∞·ª£c t√≠nh!")
                
                st.subheader("K·∫øt qu·∫£ PCA")
                if n_components == 2:
                    fig_pca = ve_bieu_do(X_pca[:, :2], y, "Tr·ª±c quan h√≥a PCA 2D")
                    st.pyplot(fig_pca)
                elif n_components == 3:
                    fig_pca = ve_bieu_do_3d(X_pca, y, "Tr·ª±c quan h√≥a PCA 3D")
                    st.plotly_chart(fig_pca, use_container_width=True)
                else:
                    explained_variance_ratio = pca.explained_variance_ratio_
                    total_variance = sum(explained_variance_ratio)
                    st.write("**T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch cho t·ª´ng chi·ªÅu:**", explained_variance_ratio)
                    st.write("**T·ªïng t·ª∑ l·ªá ph∆∞∆°ng sai gi·ªØ l·∫°i:**", total_variance)
                
                with mlflow.start_run():
                    mlflow.log_param("n_components", n_components)
                    if n_components == 2:
                        fig_pca.savefig("pca_visualization.png")
                        mlflow.log_artifact("pca_visualization.png")
                    elif n_components == 3:
                        fig_pca.write_image("pca_visualization.png")
                        mlflow.log_artifact("pca_visualization.png")
                    else:
                        mlflow.log_metric("total_explained_variance", total_variance)
                st.success("K·∫øt qu·∫£ PCA ƒë√£ ƒë∆∞·ª£c l∆∞u v·ªõi MLflow!")
        
        elif option == "t-SNE":
            st.subheader("C·∫•u h√¨nh t-SNE")
            n_components = st.slider(
                "Ch·ªçn s·ªë chi·ªÅu ƒë·∫ßu ra (n_components)",
                2, 50, 2,
                help="S·ªë chi·ªÅu ƒë·ªÉ gi·∫£m. N·∫øu > 3, d√πng thu·∫≠t to√°n 'exact' v√† hi·ªÉn th·ªã KL Divergence."
            )
            
            if st.button("Ch·∫°y t-SNE", key="btn_tsne"):
                timestamp = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
                experiment_name = f"Experiment_tSNE_{timestamp}"
                mlflow.set_experiment(experiment_name)
                st.session_state.experiment_name = experiment_name
                st.write("T√™n th√≠ nghi·ªám:", experiment_name)
                
                # Ch·∫°y t-SNE tr·ª±c ti·∫øp tr√™n X_scaled
                if n_components <= 3:
                    method = 'barnes_hut'
                else:
                    method = 'exact'               
                tsne = TSNE(n_components=n_components, method=method, random_state=42)
                X_tsne = tsne.fit_transform(X_scaled)  # D√πng X_scaled thay v√¨ X_pca
                st.success("t-SNE ƒë√£ ƒë∆∞·ª£c t√≠nh!")
                
                st.subheader("K·∫øt qu·∫£ t-SNE")
                if n_components == 2:
                    fig_tsne = ve_bieu_do(X_tsne, y, "Tr·ª±c quan h√≥a t-SNE 2D")
                    st.pyplot(fig_tsne)
                elif n_components == 3:
                    fig_tsne = ve_bieu_do_3d(X_tsne, y, "Tr·ª±c quan h√≥a t-SNE 3D")
                    st.plotly_chart(fig_tsne, use_container_width=True)
                else:
                    kl_divergence = tsne.kl_divergence_
                    st.write("**Gi√° tr·ªã KL Divergence:**", kl_divergence)
                    st.info("KL Divergence c√†ng nh·ªè th√¨ c·∫•u tr√∫c c·ª•c b·ªô c·ªßa d·ªØ li·ªáu c√†ng ƒë∆∞·ª£c b·∫£o to√†n t·ªët.")
                
                with mlflow.start_run():
                    mlflow.log_param("n_components", n_components)
                    mlflow.log_param("method", method)
                    if n_components == 2:
                        fig_tsne.savefig("tsne_visualization.png")
                        mlflow.log_artifact("tsne_visualization.png")
                    elif n_components == 3:
                        fig_tsne.write_image("tsne_visualization.png")
                        mlflow.log_artifact("tsne_visualization.png")
                    else:
                        mlflow.log_metric("kl_divergence", kl_divergence)
                st.success("K·∫øt qu·∫£ t-SNE ƒë√£ ƒë∆∞·ª£c l∆∞u v·ªõi MLflow!")
# ----------- Tab 3: MLflow -----------
with tab3:
    st.header("Tracking MLflow")
    try:
        from mlflow.tracking import MlflowClient
        client = MlflowClient()
    
        # L·∫•y danh s√°ch th√≠ nghi·ªám t·ª´ MLflow
        experiments = mlflow.search_experiments()
    
        if experiments:
            st.write("#### Danh s√°ch th√≠ nghi·ªám")
            experiment_data = [
                {
                    "Experiment ID": exp.experiment_id,
                    "Experiment Name": exp.name,
                    "Artifact Location": exp.artifact_location
                }
                for exp in experiments
            ]
            df_experiments = pd.DataFrame(experiment_data)
            st.dataframe(df_experiments)
    
            # Ch·ªçn th√≠ nghi·ªám d·ª±a tr√™n t√™n
            selected_exp_name = st.selectbox(
                "üîç Ch·ªçn th√≠ nghi·ªám ƒë·ªÉ xem chi ti·∫øt",
                options=[exp.name for exp in experiments]
            )
    
            # L·∫•y ID c·ªßa th√≠ nghi·ªám ƒë∆∞·ª£c ch·ªçn
            selected_exp_id = next(exp.experiment_id for exp in experiments if exp.name == selected_exp_name)
    
            # L·∫•y danh s√°ch runs trong th√≠ nghi·ªám ƒë∆∞·ª£c ch·ªçn
            runs = mlflow.search_runs(selected_exp_id)
            if not runs.empty:
                st.write("#### Danh s√°ch runs")
                st.dataframe(runs)
    
                # Ch·ªçn run ƒë·ªÉ xem chi ti·∫øt
                selected_run_id = st.selectbox(
                    "üîç Ch·ªçn run ƒë·ªÉ xem chi ti·∫øt",
                    options=runs["run_id"]
                )
    
                # Hi·ªÉn th·ªã chi ti·∫øt run
                run = mlflow.get_run(selected_run_id)
                st.write("##### Th√¥ng tin run")
                st.write(f"*Run ID:* {run.info.run_id}")
                st.write(f"*Experiment ID:* {run.info.experiment_id}")
                st.write(f"*Start Time:* {run.info.start_time}")
    
                st.write("##### Metrics")
                st.json(run.data.metrics)
    
                st.write("##### Params")
                st.json(run.data.params)
    
                # Li·ªát k√™ artifacts
                artifacts = client.list_artifacts(selected_run_id)
                if artifacts:
                    st.write("##### Artifacts")
                    for artifact in artifacts:
                        st.write(f"- {artifact.path}")
            else:
                st.warning("Kh√¥ng c√≥ runs n√†o trong th√≠ nghi·ªám n√†y.")
        else:
            st.warning("Kh√¥ng c√≥ th√≠ nghi·ªám n√†o ƒë∆∞·ª£c t√¨m th·∫•y.")
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch th√≠ nghi·ªám: {e}")
