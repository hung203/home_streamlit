import pandas as pd
import streamlit as st
import mlflow
import mlflow.sklearn
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.datasets import fetch_openml
import datetime

# ------------------ KHAI B√ÅO BI·∫æN TR·∫†NG TH√ÅI ------------------
if "mnist_loaded" not in st.session_state:
    st.session_state.mnist_loaded = False
if "X_pca" not in st.session_state:
    st.session_state.X_pca = None

# ------------------ H√ÄM T·∫¢I D·ªÆ LI·ªÜU MNIST ------------------
def tai_du_lieu_MNIST():
    if "mnist_data" not in st.session_state:
        mnist = fetch_openml('mnist_784', version=1, as_frame=False)
        st.session_state.mnist_data = mnist
        st.session_state.total_samples = mnist.data.shape[0]
    
    sample_size = st.number_input(
        "Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u d·ªØ li·ªáu s·ª≠ d·ª•ng",
        min_value=1000,
        max_value=st.session_state.total_samples,
        value=st.session_state.total_samples,
        step=1000,
        help="Ch·ªçn s·ªë m·∫´u d·ªØ li·ªáu ƒë·ªÉ gi·∫£m th·ªùi gian t√≠nh to√°n (m·∫∑c ƒë·ªãnh l√† to√†n b·ªô d·ªØ li·ªáu)"
    )
    
    if st.button("T·∫£i d·ªØ li·ªáu MNIST"):
        mnist = st.session_state.mnist_data
        X, y = mnist.data / 255.0, mnist.target.astype(int)
        if sample_size < st.session_state.total_samples:
            X, _, y, _ = train_test_split(
                X, y, train_size=sample_size, random_state=42, stratify=y
            )
        st.session_state.X = X
        st.session_state.y = y
        st.session_state.mnist_loaded = True
        st.success(f"D·ªØ li·ªáu MNIST ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªõi {sample_size} m·∫´u!")

# ------------------ H√ÄM V·∫º BI·ªÇU ƒê·ªí TR·ª∞C QUAN H√ìA ------------------
def ve_bieu_do(X_embedded, y, tieu_de):
    fig, ax = plt.subplots(figsize=(8, 6))
    scatter = ax.scatter(X_embedded[:, 0], X_embedded[:, 1], c=y, cmap='tab10', alpha=0.6)
    ax.set_title(tieu_de)
    ax.set_xlabel("Th√†nh ph·∫ßn 1")
    ax.set_ylabel("Th√†nh ph·∫ßn 2")
    plt.colorbar(scatter, ax=ax, label="Ch·ªØ s·ªë")
    return fig

# ------------------ T·∫†O 3 TAB ------------------
tab1, tab2, tab3 = st.tabs(["L√Ω thuy·∫øt v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu", "Th·ª±c hi·ªán gi·∫£m chi·ªÅu", "MLflow"])

# ----------- Tab 1: L√Ω thuy·∫øt v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu -----------
with tab1:
    st.header("L√Ω thuy·∫øt v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu")
    st.markdown("""
    ### Gi·ªõi thi·ªáu v·ªÅ gi·∫£m chi·ªÅu d·ªØ li·ªáu üöÄ
    **Gi·∫£m chi·ªÅu d·ªØ li·ªáu** l√† qu√° tr√¨nh chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ kh√¥ng gian c√≥ s·ªë chi·ªÅu cao (v·ªõi nhi·ªÅu ƒë·∫∑c tr∆∞ng) sang kh√¥ng gian c√≥ s·ªë chi·ªÅu th·∫•p h∆°n m√† v·∫´n gi·ªØ l·∫°i ƒë∆∞·ª£c nh·ªØng ƒë·∫∑c tr∆∞ng quan tr·ªçng nh·∫•t. Qu√° tr√¨nh n√†y gi√∫p:
    - **Tr·ª±c quan h√≥a d·ªØ li·ªáu üìä:** Hi·ªÉn th·ªã d·ªØ li·ªáu trong kh√¥ng gian 2D ho·∫∑c 3D, t·ª´ ƒë√≥ d·ªÖ d√†ng nh·∫≠n bi·∫øt c·∫•u tr√∫c, nh√≥m (clusters) hay c√°c m·ªëi li√™n h·ªá gi·ªØa c√°c m·∫´u.
    - **Gi·∫£m nhi·ªÖu v√† tƒÉng t·ªëc ƒë·ªô t√≠nh to√°n ‚ö°:** Lo·∫°i b·ªè nh·ªØng ƒë·∫∑c tr∆∞ng d∆∞ th·ª´a, kh√¥ng c·∫ßn thi·∫øt gi√∫p m√¥ h√¨nh h·ªçc m√°y ch·∫°y nhanh h∆°n v√† tr√°nh t√¨nh tr·∫°ng qu√° kh·ªõp (overfitting).
    
    ### C√°c ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu d·ªØ li·ªáu ph·ªï bi·∫øn üîç
    #### 1. PCA (Principal Component Analysis) üí°
    - **Nguy√™n l√Ω:**  
      PCA t√¨m c√°c th√†nh ph·∫ßn ch√≠nh (principal components) sao cho ph·∫ßn l·ªõn ph∆∞∆°ng sai c·ªßa d·ªØ li·ªáu ƒë∆∞·ª£c gi·ªØ l·∫°i. N√≥ s·ª≠ d·ª•ng bi·∫øn ƒë·ªïi tuy·∫øn t√≠nh ƒë·ªÉ chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang kh√¥ng gian m·ªõi v·ªõi c√°c th√†nh ph·∫ßn ƒë·ªôc l·∫≠p.
    - **∆Øu ƒëi·ªÉm:**  
      - ƒê∆°n gi·∫£n, hi·ªáu qu·∫£ v√† d·ªÖ hi·ªÉu.
      - Gi·∫£m ƒë∆∞·ª£c s·ªë chi·ªÅu m√† v·∫´n gi·ªØ l·∫°i ph·∫ßn l·ªõn th√¥ng tin quan tr·ªçng.
    - **Nh∆∞·ª£c ƒëi·ªÉm:**  
      - L√† m·ªôt ph∆∞∆°ng ph√°p tuy·∫øn t√≠nh, kh√¥ng th·ªÉ b·∫Øt ƒë∆∞·ª£c nh·ªØng quan h·ªá phi tuy·∫øn gi·ªØa c√°c ƒë·∫∑c tr∆∞ng.
      - ƒê√¥i khi kh√≥ di·ªÖn gi·∫£i √Ω nghƒ©a c·ªßa c√°c th√†nh ph·∫ßn ch√≠nh khi s·ªë chi·ªÅu g·ªëc qu√° l·ªõn.
      
    #### 2. t-SNE (t-distributed Stochastic Neighbor Embedding) üî•
    - **Nguy√™n l√Ω:**  
      t-SNE tr·ª±c quan h√≥a d·ªØ li·ªáu b·∫±ng c√°ch chuy·ªÉn ƒë·ªïi kho·∫£ng c√°ch gi·ªØa c√°c ƒëi·ªÉm trong kh√¥ng gian cao chi·ªÅu th√†nh x√°c su·∫•t, sau ƒë√≥ t√°i t·∫°o l·∫°i c√°c m·ªëi quan h·ªá n√†y trong kh√¥ng gian 2D ho·∫∑c 3D. Ph∆∞∆°ng ph√°p n√†y gi√∫p ph√°t hi·ªán c√°c nh√≥m nh·ªè (clusters) trong d·ªØ li·ªáu phi tuy·∫øn.
    - **∆Øu ƒëi·ªÉm:**  
      - R·∫•t hi·ªáu qu·∫£ trong vi·ªác tr·ª±c quan h√≥a c√°c t·∫≠p d·ªØ li·ªáu ph·ª©c t·∫°p nh∆∞ h√¨nh ·∫£nh, vƒÉn b·∫£n.
      - Gi√∫p ph√°t hi·ªán c√°c c·∫•u tr√∫c ·∫©n, nh√≥m (clusters) trong d·ªØ li·ªáu.
    - **Nh∆∞·ª£c ƒëi·ªÉm:**  
      - T·ªëc ƒë·ªô t√≠nh to√°n ch·∫≠m khi x·ª≠ l√Ω s·ªë l∆∞·ª£ng m·∫´u l·ªõn.
      - K·∫øt qu·∫£ c√≥ th·ªÉ thay ƒë·ªïi m·∫°nh t√πy thu·ªôc v√†o c√°c tham s·ªë nh∆∞ perplexity v√† learning rate.
    
    ### ·ª®ng d·ª•ng c·ªßa gi·∫£m chi·ªÅu d·ªØ li·ªáu üíº
    - **Tr·ª±c quan h√≥a d·ªØ li·ªáu:**  
      Gi√∫p c√°c nh√† khoa h·ªçc d·ªØ li·ªáu v√† k·ªπ s∆∞ hi·ªÉu ƒë∆∞·ª£c c·∫•u tr√∫c n·ªôi t·∫°i c·ªßa d·ªØ li·ªáu, nh·∫≠n di·ªán c√°c m·∫´u b·∫•t th∆∞·ªùng v√† ph√¢n nh√≥m d·ªØ li·ªáu.
    - **Ti·ªÅn x·ª≠ l√Ω cho h·ªçc m√°y:**  
      Gi·∫£m s·ªë chi·ªÅu d·ªØ li·ªáu gi√∫p gi·∫£m ƒë·ªô ph·ª©c t·∫°p c·ªßa m√¥ h√¨nh, tƒÉng hi·ªáu su·∫•t t√≠nh to√°n v√† gi·∫£m nguy c∆° qu√° kh·ªõp.
    - **Khai ph√° d·ªØ li·ªáu:**  
      Ph√°t hi·ªán c√°c m·ªëi quan h·ªá ·∫©n, hi·ªÉu s√¢u h∆°n v·ªÅ d·ªØ li·ªáu v√† ƒë∆∞a ra c√°c quy·∫øt ƒë·ªãnh kinh doanh d·ª±a tr√™n d·ªØ li·ªáu.
    
    ### L∆∞u √Ω khi th·ª±c hi·ªán gi·∫£m chi·ªÅu d·ªØ li·ªáu ‚ö†Ô∏è
    - **L·ª±a ch·ªçn thu·∫≠t to√°n:**  
      T√πy v√†o ƒë·∫∑c ƒëi·ªÉm c·ªßa d·ªØ li·ªáu v√† m·ª•c ti√™u ph√¢n t√≠ch m√† b·∫°n c√≥ th·ªÉ l·ª±a ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu ph√π h·ª£p (PCA cho d·ªØ li·ªáu tuy·∫øn t√≠nh, t-SNE cho d·ªØ li·ªáu phi tuy·∫øn).
    - **Tinh ch·ªânh tham s·ªë:**  
      C√°c tham s·ªë nh∆∞ s·ªë l∆∞·ª£ng th√†nh ph·∫ßn trong PCA, perplexity v√† learning rate trong t-SNE r·∫•t quan tr·ªçng v√† c·∫ßn ƒë∆∞·ª£c th·ª≠ nghi·ªám ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c k·∫øt qu·∫£ t·ªët nh·∫•t.
    - **Hi·ªÉu r√µ d·ªØ li·ªáu:**  
      Ph√¢n t√≠ch v√† hi·ªÉu r√µ d·ªØ li·ªáu ban ƒë·∫ßu s·∫Ω gi√∫p vi·ªác l·ª±a ch·ªçn ph∆∞∆°ng ph√°p v√† c·∫•u h√¨nh tham s·ªë tr·ªü n√™n hi·ªáu qu·∫£ h∆°n.
    """)

# ----------- Tab 2: Th·ª±c hi·ªán gi·∫£m chi·ªÅu -----------
with tab2:
    st.title("Tr·ª±c quan h√≥a PCA & t-SNE tr√™n MNIST")
    # N·∫øu d·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c t·∫£i, hi·ªÉn th·ªã giao di·ªán t·∫£i d·ªØ li·ªáu
    if not st.session_state.mnist_loaded:
        tai_du_lieu_MNIST()
    
    if st.session_state.mnist_loaded:
        X = st.session_state.X
        y = st.session_state.y
        st.write("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
    
        # Cho ng∆∞·ªùi d√πng l·ª±a ch·ªçn thu·∫≠t to√°n
        option = st.radio(
            "Ch·ªçn thu·∫≠t to√°n c·∫ßn ch·∫°y:",
            ("PCA", "t-SNE"),
            help="Ch·ªçn PCA ƒë·ªÉ thu g·ªçn d·ªØ li·ªáu ho·∫∑c t-SNE ƒë·ªÉ tr·ª±c quan h√≥a kh√¥ng gian d·ªØ li·ªáu."
        )
        
        # Chu·∫©n h√≥a d·ªØ li·ªáu
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        timestamp = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
        experiment_name = f"Experiment_{option}_{timestamp}"
        mlflow.set_experiment(experiment_name)
        st.session_state.experiment_name = experiment_name
        st.write("T√™n th√≠ nghi·ªám:", experiment_name)
        
        if option == "PCA":
            st.subheader("C·∫•u h√¨nh PCA")
            n_components = st.slider(
                "Ch·ªçn s·ªë th√†nh ph·∫ßn (n_components)",
                2, 100, 50,
                help="S·ªë th√†nh ph·∫ßn ch√≠nh c·∫ßn gi·ªØ l·∫°i sau khi th·ª±c hi·ªán PCA."
            )
            
            if st.button("Ch·∫°y PCA", key="btn_pca"):
                X_pca = PCA(n_components=n_components).fit_transform(X_scaled)
                st.session_state.X_pca = X_pca
                st.success("PCA ƒë√£ ƒë∆∞·ª£c t√≠nh!")
                st.subheader("K·∫øt qu·∫£ PCA")
                fig_pca = ve_bieu_do(X_pca[:, :2], y, "Tr·ª±c quan h√≥a PCA")
                st.pyplot(fig_pca)
                
                # Logging v·ªõi MLflow
                with mlflow.start_run():
                    mlflow.log_param("n_components", n_components)
                    fig_pca.savefig("pca_visualization.png")
                    mlflow.log_artifact("pca_visualization.png")
                st.success("K·∫øt qu·∫£ PCA ƒë√£ ƒë∆∞·ª£c l∆∞u v·ªõi MLflow!")
        
        elif option == "t-SNE":
            st.subheader("C·∫•u h√¨nh t-SNE")
            perplexity = st.slider(
                "Ch·ªçn gi√° tr·ªã perplexity",
                5, 50, 30,
                help="S·ªë l∆∞·ª£ng l√°ng gi·ªÅng ƒë∆∞·ª£c c√¢n nh·∫Øc khi t√≠nh kho·∫£ng c√°ch gi·ªØa c√°c ƒëi·ªÉm."
            )
            learning_rate = st.slider(
                "Ch·ªçn learning_rate",
                10, 1000, 200,
                help="T·ªëc ƒë·ªô h·ªçc khi t·ªëi ∆∞u h√≥a kh√¥ng gian nh√∫ng c·ªßa t-SNE."
            )
            
            if st.button("Ch·∫°y t-SNE", key="btn_tsne"):
                # N·∫øu ch∆∞a c√≥ k·∫øt qu·∫£ PCA, t·ª± ƒë·ªông t√≠nh PCA v·ªõi n_components m·∫∑c ƒë·ªãnh (50)
                if st.session_state.X_pca is None:
                    st.info("Ch∆∞a c√≥ k·∫øt qu·∫£ PCA, t·ª± ƒë·ªông t√≠nh PCA v·ªõi n_components = 50.")
                    X_pca = PCA(n_components=50).fit_transform(X_scaled)
                    st.session_state.X_pca = X_pca
                else:
                    X_pca = st.session_state.X_pca
                    
                tsne = TSNE(n_components=2, perplexity=perplexity, learning_rate=learning_rate, random_state=42)
                X_tsne = tsne.fit_transform(X_pca)
                st.success("t-SNE ƒë√£ ƒë∆∞·ª£c t√≠nh!")
                st.subheader("K·∫øt qu·∫£ t-SNE")
                fig_tsne = ve_bieu_do(X_tsne, y, "Tr·ª±c quan h√≥a t-SNE")
                st.pyplot(fig_tsne)
                
                # Logging v·ªõi MLflow
                with mlflow.start_run():
                    mlflow.log_param("perplexity", perplexity)
                    mlflow.log_param("learning_rate", learning_rate)
                    fig_tsne.savefig("tsne_visualization.png")
                    mlflow.log_artifact("tsne_visualization.png")
                st.success("K·∫øt qu·∫£ t-SNE ƒë√£ ƒë∆∞·ª£c l∆∞u v·ªõi MLflow!")

# ----------- Tab 3: MLflow -----------
with tab3:
    st.header("Tracking MLflow")
    try:
        from mlflow.tracking import MlflowClient
        client = MlflowClient()
    
        # L·∫•y danh s√°ch th√≠ nghi·ªám t·ª´ MLflow
        experiments = mlflow.search_experiments()
    
        if experiments:
            st.write("#### Danh s√°ch th√≠ nghi·ªám")
            experiment_data = [
                {
                    "Experiment ID": exp.experiment_id,
                    "Experiment Name": exp.name,
                    "Artifact Location": exp.artifact_location
                }
                for exp in experiments
            ]
            df_experiments = pd.DataFrame(experiment_data)
            st.dataframe(df_experiments)
    
            # Ch·ªçn th√≠ nghi·ªám d·ª±a tr√™n t√™n
            selected_exp_name = st.selectbox(
                "üîç Ch·ªçn th√≠ nghi·ªám ƒë·ªÉ xem chi ti·∫øt",
                options=[exp.name for exp in experiments]
            )
    
            # L·∫•y ID c·ªßa th√≠ nghi·ªám ƒë∆∞·ª£c ch·ªçn
            selected_exp_id = next(exp.experiment_id for exp in experiments if exp.name == selected_exp_name)
    
            # L·∫•y danh s√°ch runs trong th√≠ nghi·ªám ƒë∆∞·ª£c ch·ªçn
            runs = mlflow.search_runs(selected_exp_id)
            if not runs.empty:
                st.write("#### Danh s√°ch runs")
                st.dataframe(runs)
    
                # Ch·ªçn run ƒë·ªÉ xem chi ti·∫øt
                selected_run_id = st.selectbox(
                    "üîç Ch·ªçn run ƒë·ªÉ xem chi ti·∫øt",
                    options=runs["run_id"]
                )
    
                # Hi·ªÉn th·ªã chi ti·∫øt run
                run = mlflow.get_run(selected_run_id)
                st.write("##### Th√¥ng tin run")
                st.write(f"*Run ID:* {run.info.run_id}")
                st.write(f"*Experiment ID:* {run.info.experiment_id}")
                st.write(f"*Start Time:* {run.info.start_time}")
    
                st.write("##### Metrics")
                st.json(run.data.metrics)
    
                st.write("##### Params")
                st.json(run.data.params)
    
                # Li·ªát k√™ artifacts
                artifacts = client.list_artifacts(selected_run_id)
                if artifacts:
                    st.write("##### Artifacts")
                    for artifact in artifacts:
                        st.write(f"- {artifact.path}")
            else:
                st.warning("Kh√¥ng c√≥ runs n√†o trong th√≠ nghi·ªám n√†y.")
        else:
            st.warning("Kh√¥ng c√≥ th√≠ nghi·ªám n√†o ƒë∆∞·ª£c t√¨m th·∫•y.")
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch th√≠ nghi·ªám: {e}")
